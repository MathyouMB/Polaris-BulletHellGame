<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>searchx=x
searchy=y
searching=false
turnkind=floor(random(2))
canshoot=true
//instance_create(x,y,obj_cannon1)
//instance_create(x,y,obj_cannon2)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sightdist,maxspeed,unpre,turnspeed,bul,nearest_enemy,;
sightdist=180 //the sight distance before it can see the enemy
maxspeed=0.5 //the max speed, the actual speed is automatically calculated
shoottime=room_speed/2 //the amount of time between shots
turnspeed=0.5 //the turning speed
unpre=10 //the unpreciseness of the shots
shotspeed=15 //speed of the shots

searching=true
/*
nearest_enemy=instance_nearest(x,y,obj_p)
if distance_to_object(nearest_enemy)&lt;=sightdist {
if !collision_line(x,y,nearest_enemy.x,nearest_enemy.y,obj_block,true,true) {
searching=false
//shoot the enemy
if canshoot=true {
   canshoot=false
//bul=instance_create(x+lengthdir_x(sprite_get_width(sprite_index),direction),y+lengthdir_y(sprite_get_width(sprite_index),direction),obj_bullet)
//bul.randomness=unpre
//bul.movespeed=shotspeed
//alarm[0]=shoottime+random(shoottime/3) 

}
/*we see the enemy*/ 
/*
}

} else {
searching=true
/*nope, keep searching*/ 
//}

//*/
if searching=true {
//move in the direction of search point if searching
motion_add(point_direction(x,y,searchx,searchy),maxspeed/10)
 } else {
//go towards enemy if we can see the enemy
direction=scr_rotate(direction,point_direction(x,y,nearest_enemy.x + 20,nearest_enemy.y+ 20),turnspeed)
motion_add(direction,maxspeed/10) 


}
//limit the speed
if speed&gt;maxspeed {
speed=maxspeed 
}


//make searchx/searchy random if close enough to point
if searching=true and distance_to_point(searchx,searchy)&lt;=maxspeed {
searchx=random(room_width)
searchy=random(room_height) 

}
if place_meeting(x+lengthdir_x(speed*3,direction),y+lengthdir_y(speed*3,direction),obj_block) {
switch(turnkind) {
case 0:
direction+=turnspeed break;
case 1:
direction-=turnspeed break; }}

//face the direction

image_angle=scr_rotate(image_angle,direction,turnspeed* 10000)


little_turret_angle = point_direction(x,y,mouse_x,mouse_y);








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ship
draw_sprite_ext(spr_PirateCruiser,image_index,x+lengthdir_x(0,image_angle),y+lengthdir_y(0,image_angle),image_xscale,image_yscale,direction,c_white,image_alpha);
//cannon on head
draw_sprite_ext(spr_cannon,0,x+lengthdir_x(90,image_angle),y+lengthdir_y(90,image_angle),image_xscale,image_yscale,little_turret_angle,c_white,image_alpha)
//middle cannon
draw_sprite_ext(spr_cannon,0,x+lengthdir_x(0,image_angle),y+lengthdir_y(0,image_angle),image_xscale,image_yscale,little_turret_angle,c_white,image_alpha)
//lower cannon
draw_sprite_ext(spr_cannon,0,x+lengthdir_x(-110,image_angle),y+lengthdir_y(-110,image_angle),image_xscale,image_yscale,little_turret_angle,c_white,image_alpha)
// new side cannon
draw_sprite_ext(spr_cannon,0,x+lengthdir_x(-40,image_angle)+lengthdir_x(-110, image_angle + 50),y+lengthdir_y(-40,image_angle) + lengthdir_y(-110, image_angle + 50),image_xscale,image_yscale,little_turret_angle,c_white,image_alpha)
// new side cannon
draw_sprite_ext(spr_cannon,0,x+lengthdir_x(-40,image_angle)+lengthdir_x(-110, image_angle - 50),y+lengthdir_y(-40,image_angle) + lengthdir_y(-110, image_angle - 50),image_xscale,image_yscale,little_turret_angle,c_white,image_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
