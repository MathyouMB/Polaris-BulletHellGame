<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_walltemp</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.viewlock =true
global.shake = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var xTo,yTo;

if room = rm_space{
if global.dead = false{

if global.wavenum &gt; 0 {
move_towards_point(mouse_x,mouse_y,0);
xTo = obj_player.x + lengthdir_x(min(96,distance_to_point(mouse_x,mouse_y)),direction)
yTo = obj_player.y + lengthdir_y(min(96,distance_to_point(mouse_x,mouse_y)),direction)

x += (xTo-x)///25;
y += (yTo-y)///25;

view_xview = -(view_wview/2) + x;
view_yview = -(view_hview/2) + y;
//view_xview[0] = round(min(room_width,max(0,obj_m_c.x-view_wview[0]/2)));
//view_yview[0] = round(min(room_height,max(0,obj_m_c.y-view_hview[0]/2)));
//x = mean(obj_player.x,obj_player.x,mouse_x);
//y = mean(obj_player.y,obj_player.y,mouse_y);
///view_yview = 
view_xview += random_range(-global.shake,global.shake);
view_yview += random_range(-global.shake,global.shake);
global.shake*=0.9
}

if global.wavenum = 0{
move_towards_point(mouse_x,mouse_y,0);
move_towards_point(mouse_x,mouse_y,0);
xTo = obj_player.x //+ lengthdir_x(min(96,distance_to_point(mouse_x,mouse_y)),direction)
yTo = obj_player.y //+ lengthdir_y(min(96,distance_to_point(mouse_x,mouse_y)),direction)

x += (xTo-x)///25;
y += (yTo-y)///25;

view_xview = -(view_wview/2) + x;
view_yview = -(view_hview/2) + y;
//view_xview[0] = round(min(room_width,max(0,obj_m_c.x-view_wview[0]/2)));
//view_yview[0] = round(min(room_height,max(0,obj_m_c.y-view_hview[0]/2)));
//x = mean(obj_player.x,obj_player.x,mouse_x);
//y = mean(obj_player.y,obj_player.y,mouse_y);
///view_yview = 
view_xview += random_range(-global.shake,global.shake);
view_yview += random_range(-global.shake,global.shake);
global.shake*=0.9

}
}



if global.dead = true{

move_towards_point(mouse_x,mouse_y,0);
move_towards_point(mouse_x,mouse_y,0);
xTo = obj_player.x //+ lengthdir_x(min(96,distance_to_point(mouse_x,mouse_y)),direction)
yTo = obj_player.y //+ lengthdir_y(min(96,distance_to_point(mouse_x,mouse_y)),direction)

x += (xTo-x)///25;
y += (yTo-y)///25;

view_xview = -(view_wview/2) + x;
view_yview = -(view_hview/2) + y;
//view_xview[0] = round(min(room_width,max(0,obj_m_c.x-view_wview[0]/2)));
//view_yview[0] = round(min(room_height,max(0,obj_m_c.y-view_hview[0]/2)));
//x = mean(obj_player.x,obj_player.x,mouse_x);
//y = mean(obj_player.y,obj_player.y,mouse_y);
///view_yview = 
view_xview += random_range(-global.shake,global.shake);
view_yview += random_range(-global.shake,global.shake);
global.shake*=0.9
}

}






if room = rm_title{
move_towards_point(room_width/2,room_height/2,0);
xTo = room_width/2 //+ lengthdir_x(min(96,distance_to_point(mouse_x,mouse_y)),direction)
yTo = room_height/2 //+ lengthdir_y(min(96,distance_to_point(mouse_x,mouse_y)),direction)

x += (xTo-x)///25;
y += (yTo-y)///25;

view_xview = -(view_wview/2) + x;
view_yview = -(view_hview/2) + y;
//view_xview[0] = round(min(room_width,max(0,obj_m_c.x-view_wview[0]/2)));
//view_yview[0] = round(min(room_height,max(0,obj_m_c.y-view_hview[0]/2)));
//x = mean(obj_player.x,obj_player.x,mouse_x);
//y = mean(obj_player.y,obj_player.y,mouse_y);
///view_yview = 
view_xview += random_range(-global.shake,global.shake);
view_yview += random_range(-global.shake,global.shake);
global.shake*=0.9

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.shake += 0.25
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
